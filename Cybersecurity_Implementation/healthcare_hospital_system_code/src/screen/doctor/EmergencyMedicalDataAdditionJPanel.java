/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package screen.doctor;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;
import source.department.Department;
import source.department.SecurityDepartment;
import source.employee.Employee;
import source.hospital.Hospital;
import source.patient.Patient;
import source.patient.Prescription;
import source.patient.Surgery;
import source.patient.VitalSigns;
import source.role.DoctorRole;
import source.role.NurseRole;
import source.userAccount.UserAccount;
import source.util.Util;
import source.util.UtilFunctions;
import source.workQueue.MedicalDataAdditionWorkRequest;
import source.workQueue.WorkRequest;

/**
 *
 * @author GaurangDeshpande
 */
public class EmergencyMedicalDataAdditionJPanel extends javax.swing.JPanel {

    private JPanel cardContainer;
    private UserAccount account;
    private Patient patient;
    private Hospital hospital;
    ArrayList<Employee> assists;
    private static Logger log;
    
    /**
     * Creates new form EmergencyMedicalDataAdditionJPanel
     */
    EmergencyMedicalDataAdditionJPanel(JPanel cardContainer, UserAccount account, Patient patient, Hospital hospital) {
        initComponents();
        this.cardContainer = cardContainer;
        this.account = account;
        this.patient = patient;
        this.hospital = hospital;
        lblLoggedInUser.setText(account.getEmployee().getPerson().getLastName()+", "+account.getEmployee().getPerson().getFirstName());
        log = Logger.getLogger(EmergencyMedicalDataAdditionJPanel.class);
        
        assists = new ArrayList<>();
        populateDoctorsCombo();
        populateTableAssists();
        populatePatientHistory();
        clearAllFieldsAndErrLabels();
    }

    void populatePatientHistory(){
        lblPatientID.setText(patient.getPatientID());
        lblPatientName.setText(patient.getPerson().getFirstName()+" "+patient.getPerson().getLastName());
        txtVisitReason.setText("");
        lblVisitDate.setText(String.valueOf(UtilFunctions.formatDate(new Date())));
        lblPerformedBy.setText(account.getEmployee().getPerson().getFirstName()+" "+account.getEmployee().getPerson().getLastName());
        lblErrVisitReason.setVisible(false);
        txtSurgeryDate.setText("MM/dd/yyyy");
        txtSurgeryDate.setForeground(new Color(153,153,153));
        txtPrescribedOn.setText("MM/dd/yyyy");
        txtPrescribedOn.setForeground(new Color(153,153,153));
        txtPrescribedTill.setText("MM/dd/yyyy");
        txtPrescribedTill.setForeground(new Color(153,153,153));
        cmbAdditionType.removeAllItems();
        cmbAdditionType.addItem("Select Addition Type");
        cmbAdditionType.addItem("Add Vital Sign");
        cmbAdditionType.addItem("Add Prescription");
        cmbAdditionType.addItem("Add Surgery");
        
        populateRequestTable();
    }
    
    void populateRequestTable(){
        DefaultTableModel dtm = (DefaultTableModel)tblRequestList.getModel();
        dtm.setRowCount(0);
        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {
            if (request instanceof MedicalDataAdditionWorkRequest) {
                if (((MedicalDataAdditionWorkRequest) request).getPatientInTalks().equals(patient)) {
                    Object row[] = new Object[6];
                    row[0] = request;
                    row[1] = request.getRequestAssignee();
                    row[2] = UtilFunctions.formatDate(request.getRequestCreationDate());
                    row[3] = request.getStatus();
                    String outcome = ((MedicalDataAdditionWorkRequest) request).getRequestOutcome();
                    row[4] = outcome == null ? "Waiting" : outcome;
                    String result = ((MedicalDataAdditionWorkRequest) request).getComments();
                    row[5] = result == null ? "NA" : result;
                    dtm.addRow(row);
                }
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        lblPatientID = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblPatientName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRequestList = new javax.swing.JTable();
        btnRaiseRequest = new javax.swing.JButton();
        btnViewRequest = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblHeading = new javax.swing.JLabel();
        lblLoggedInUser = new javax.swing.JLabel();
        lblErrVisitReason = new javax.swing.JLabel();
        lblVisitDate = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtVisitReason = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtBloodPressure = new javax.swing.JTextField();
        lblErrBloodPressure = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtPulseRate = new javax.swing.JTextField();
        lblErrPulseRate = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        lblErrWeight = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtRespirationRate = new javax.swing.JTextField();
        lblErrRespirationRate = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtBloodGlucoseLevel = new javax.swing.JTextField();
        lblErrBloodGlucoseLevel = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtHeight = new javax.swing.JTextField();
        lblErrHeight = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtTemperature = new javax.swing.JTextField();
        lblErrTemperature = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtMedicineName = new javax.swing.JTextField();
        lblErrMedicineName = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtPrescribedOn = new javax.swing.JTextField();
        lblErrPrescribedOn = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtPrescribedTill = new javax.swing.JTextField();
        lblErrPrescribedTill = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtDailyDosages = new javax.swing.JTextField();
        lblErrDailyDosages = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        scrollPrescriptionDescription = new javax.swing.JScrollPane();
        txtPrescriptionDescription = new javax.swing.JTextArea();
        lblErrDescription = new javax.swing.JLabel();
        lblErrSurgeryName = new javax.swing.JLabel();
        txtSurgeryName = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txtSurgeryDate = new javax.swing.JTextField();
        lblErrSurgeryDate = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        txtSurgeryDescription = new javax.swing.JTextField();
        lblErrSurgeryDescription = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        txtComplications = new javax.swing.JTextField();
        lblErrSurgeryComplications = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        cmbDoctors = new javax.swing.JComboBox();
        btnAddAssists = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        lblPerformedBy = new javax.swing.JLabel();
        cmbAdditionType = new javax.swing.JComboBox();
        jLabel29 = new javax.swing.JLabel();
        jScrollTableAssist = new javax.swing.JScrollPane();
        tblAssistants = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Patient ID:");

        lblPatientID.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("Patient Name:");

        lblPatientName.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        tblRequestList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request Message", "Assignee", "Raised On", "Status", "Result", "Comments"
            }
        ));
        jScrollPane1.setViewportView(tblRequestList);

        btnRaiseRequest.setBackground(new java.awt.Color(51, 51, 51));
        btnRaiseRequest.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnRaiseRequest.setForeground(new java.awt.Color(255, 255, 255));
        btnRaiseRequest.setText("Raise Special Medical Request");
        btnRaiseRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRaiseRequestActionPerformed(evt);
            }
        });

        btnViewRequest.setBackground(new java.awt.Color(51, 51, 51));
        btnViewRequest.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnViewRequest.setForeground(new java.awt.Color(255, 255, 255));
        btnViewRequest.setText("View Request Details");
        btnViewRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewRequestActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(51, 51, 51));
        btnBack.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblHeading.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        lblHeading.setText("Raise Emergency Data Addition Request");

        lblLoggedInUser.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblLoggedInUser.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        lblErrVisitReason.setForeground(new java.awt.Color(255, 51, 0));
        lblErrVisitReason.setText("lblErr");

        lblVisitDate.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblVisitDate.setText("Reason for visit:");

        txtVisitReason.setColumns(20);
        txtVisitReason.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        txtVisitReason.setRows(2);
        jScrollPane2.setViewportView(txtVisitReason);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel11.setText("Reason for visit:");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel12.setText("Visit Time:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Blood Pressure:");

        txtBloodPressure.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        lblErrBloodPressure.setForeground(new java.awt.Color(255, 51, 0));
        lblErrBloodPressure.setText("lblErr");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setText("Pulse Rate:");

        txtPulseRate.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        lblErrPulseRate.setForeground(new java.awt.Color(255, 51, 0));
        lblErrPulseRate.setText("lblErr");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setText("Weight:");

        txtWeight.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        lblErrWeight.setForeground(new java.awt.Color(255, 51, 0));
        lblErrWeight.setText("lblErr");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText("Respiration Rate:");

        txtRespirationRate.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        lblErrRespirationRate.setForeground(new java.awt.Color(255, 51, 0));
        lblErrRespirationRate.setText("lblErr");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel10.setText("Blood Glucose Level:");

        txtBloodGlucoseLevel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        lblErrBloodGlucoseLevel.setForeground(new java.awt.Color(255, 51, 0));
        lblErrBloodGlucoseLevel.setText("lblErr");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel13.setText("Height:");

        txtHeight.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        lblErrHeight.setForeground(new java.awt.Color(255, 51, 0));
        lblErrHeight.setText("lblErr");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel14.setText("Temperature:");

        txtTemperature.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        lblErrTemperature.setForeground(new java.awt.Color(255, 51, 0));
        lblErrTemperature.setText("lblErr");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel15.setText("Medicine Name:");

        txtMedicineName.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        lblErrMedicineName.setForeground(new java.awt.Color(255, 51, 0));
        lblErrMedicineName.setText("lblErr");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel16.setText("Prescribed on:");

        txtPrescribedOn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        txtPrescribedOn.setForeground(new java.awt.Color(153, 153, 153));
        txtPrescribedOn.setText("MM/dd/yyyy");
        txtPrescribedOn.setToolTipText("");
        txtPrescribedOn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPrescribedOnFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPrescribedOnFocusLost(evt);
            }
        });

        lblErrPrescribedOn.setForeground(new java.awt.Color(255, 51, 0));
        lblErrPrescribedOn.setText("lblErr");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel17.setText("Prescribed Till:");

        txtPrescribedTill.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        txtPrescribedTill.setForeground(new java.awt.Color(153, 153, 153));
        txtPrescribedTill.setText("MM/dd/yyyy");
        txtPrescribedTill.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPrescribedTillFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPrescribedTillFocusLost(evt);
            }
        });

        lblErrPrescribedTill.setForeground(new java.awt.Color(255, 51, 0));
        lblErrPrescribedTill.setText("lblErr");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel18.setText("Daily Dose:");

        txtDailyDosages.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        lblErrDailyDosages.setForeground(new java.awt.Color(255, 51, 0));
        lblErrDailyDosages.setText("lblErr");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel19.setText("Description:");

        txtPrescriptionDescription.setColumns(20);
        txtPrescriptionDescription.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        txtPrescriptionDescription.setRows(2);
        scrollPrescriptionDescription.setViewportView(txtPrescriptionDescription);

        lblErrDescription.setForeground(new java.awt.Color(255, 51, 0));
        lblErrDescription.setText("lblErr");

        lblErrSurgeryName.setForeground(new java.awt.Color(255, 51, 0));
        lblErrSurgeryName.setText("lblErr");

        txtSurgeryName.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel21.setText("Surgery Name:");

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel22.setText("Surgery Date:");

        txtSurgeryDate.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        txtSurgeryDate.setForeground(new java.awt.Color(153, 153, 153));
        txtSurgeryDate.setText("MM/dd/yyyy");
        txtSurgeryDate.setToolTipText("");
        txtSurgeryDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSurgeryDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSurgeryDateFocusLost(evt);
            }
        });

        lblErrSurgeryDate.setForeground(new java.awt.Color(255, 51, 0));
        lblErrSurgeryDate.setText("lblErr");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel23.setText("Description:");

        txtSurgeryDescription.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        lblErrSurgeryDescription.setForeground(new java.awt.Color(255, 51, 0));
        lblErrSurgeryDescription.setText("lblErr");

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel24.setText("Complications:");

        txtComplications.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        lblErrSurgeryComplications.setForeground(new java.awt.Color(255, 51, 0));
        lblErrSurgeryComplications.setText("lblErr");

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel26.setText("Assisted By:");

        cmbDoctors.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        btnAddAssists.setBackground(new java.awt.Color(51, 51, 51));
        btnAddAssists.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAddAssists.setForeground(new java.awt.Color(255, 255, 255));
        btnAddAssists.setText("Add >");
        btnAddAssists.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAssistsActionPerformed(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel28.setText("Perfromed By:");

        lblPerformedBy.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        cmbAdditionType.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        cmbAdditionType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAdditionTypeActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel29.setText("Addition:");

        tblAssistants.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblAssistants.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Assisted By", "Department"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAssistants.getTableHeader().setReorderingAllowed(false);
        jScrollTableAssist.setViewportView(tblAssistants);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHeading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scrollPrescriptionDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblErrDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRaiseRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnViewRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPulseRate, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblErrPulseRate, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblErrBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblErrWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtRespirationRate, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblErrRespirationRate, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBloodGlucoseLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblErrBloodGlucoseLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtHeight)
                                    .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblErrHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblErrTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPrescribedTill, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblErrPrescribedTill, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMedicineName, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblErrMedicineName, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPrescribedOn, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblErrPrescribedOn, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDailyDosages, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblErrDailyDosages, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblVisitDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblPatientID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblPatientName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblErrVisitReason, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cmbAdditionType, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 3, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblPerformedBy, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txtSurgeryName, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                                                    .addComponent(txtSurgeryDate)
                                                    .addComponent(txtSurgeryDescription))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblErrSurgeryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblErrSurgeryDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblErrSurgeryName, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cmbDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtComplications, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(6, 6, 6)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(btnAddAssists, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                                                    .addComponent(lblErrSurgeryComplications, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollTableAssist, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(187, 187, 187))
                            .addComponent(jScrollPane1))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblLoggedInUser, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLoggedInUser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVisitDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbAdditionType, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrVisitReason)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrBloodPressure))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPulseRate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrPulseRate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrWeight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRespirationRate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrRespirationRate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBloodGlucoseLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrBloodGlucoseLevel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrHeight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrTemperature))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMedicineName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrMedicineName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrescribedOn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrPrescribedOn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrescribedTill, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrPrescribedTill))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDailyDosages, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrDailyDosages))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scrollPrescriptionDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrDescription))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPerformedBy, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSurgeryName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrSurgeryName)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSurgeryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrSurgeryDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSurgeryDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrSurgeryDescription))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrSurgeryComplications)
                            .addComponent(txtComplications, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddAssists, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollTableAssist, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRaiseRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRaiseRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRaiseRequestActionPerformed
        // TODO add your handling code here:
        boolean allDataEnteredCorrectly = validateData();
        if(allDataEnteredCorrectly){
            log.info(UtilFunctions.encrypt("EM_REQ : "+account.getEmployee()));
            
            String requestMessage = (String)cmbAdditionType.getSelectedItem();
            MedicalDataAdditionWorkRequest request = new MedicalDataAdditionWorkRequest();
            if (requestMessage.equalsIgnoreCase("Add Vital Sign")) {
                VitalSigns vitalSigns = new VitalSigns();
                if (!txtBloodPressure.getText().trim().equalsIgnoreCase("")) {
                    vitalSigns.setBloodPressure(Integer.parseInt(txtBloodPressure.getText().trim()));
                }
                if (!txtPulseRate.getText().trim().equalsIgnoreCase("")) {
                    vitalSigns.setPulseRate(Integer.parseInt(txtPulseRate.getText().trim()));
                }
                if (!txtWeight.getText().trim().equalsIgnoreCase("")) {
                    vitalSigns.setWeight(Integer.parseInt(txtWeight.getText().trim()));
                }
                if (!txtRespirationRate.getText().trim().equalsIgnoreCase("")) {
                    vitalSigns.setRespirationRate(Integer.parseInt(txtRespirationRate.getText().trim()));
                }
                if (!txtBloodGlucoseLevel.getText().trim().equalsIgnoreCase("")) {
                    vitalSigns.setBloodGlucoseLevel(Integer.parseInt(txtBloodGlucoseLevel.getText().trim()));
                }
                if (!txtHeight.getText().trim().equalsIgnoreCase("")) {
                    vitalSigns.setHeight(Integer.parseInt(txtHeight.getText().trim()));
                }
                if (!txtTemperature.getText().trim().equalsIgnoreCase("")) {
                    vitalSigns.setTemperature(Integer.parseInt(txtTemperature.getText().trim()));
                }
                vitalSigns.setPurpose(txtVisitReason.getText().trim());
                vitalSigns.setVisitDate(UtilFunctions.formatDate(new Date()));
                request.setVitalSigns(vitalSigns);
            } else if(requestMessage.equalsIgnoreCase("Add Prescription")){
                Prescription prescription = new Prescription();
                prescription.setMedicineName(txtMedicineName.getText().trim());
                prescription.setPrescribedOn(UtilFunctions.formatDate(txtPrescribedOn.getText().trim()));
                prescription.setPrescribedTill(UtilFunctions.formatDate(txtPrescribedTill.getText().trim()));
                prescription.setDailyDosage(Integer.parseInt(txtDailyDosages.getText().trim()));
                prescription.setPrescriptionDescription(txtPrescriptionDescription.getText().trim());
                prescription.setPurpose(txtVisitReason.getText().trim());
                prescription.setVisitDate(UtilFunctions.formatDate(new Date()));
                request.setPrescription(prescription);
            }
            else if(requestMessage.equalsIgnoreCase("Add Surgery")){
                Surgery surgery = new Surgery();
                surgery.setSurgeryType(txtSurgeryName.getText().trim());
                surgery.setSurgeryTime(UtilFunctions.formatDate(txtSurgeryDate.getText().trim()));
                surgery.setSurgeryDescription(txtSurgeryDescription.getText().trim());
                surgery.setSurgeryComplications(txtComplications.getText().trim());
                surgery.setPerformedBy(account.getEmployee());
                surgery.setSurgeryAssisstedBy(assists);
                surgery.setPurpose(txtVisitReason.getText().trim());
                surgery.setVisitDate(UtilFunctions.formatDate(new Date()));
                request.setSurgery(surgery);
            } else if (requestMessage.equalsIgnoreCase("Add Procedure")) {
                
            }
            request.setMessage(requestMessage);
            request.setRequestCreationDate(UtilFunctions.getTodayFormattedDate());
            request.setRequestCreator(account.getEmployee());
            request.setStatus("Initiated");
            request.setPatientInTalks(patient);
            
            Department department = null;
//            for(Department dep : hospital.getDepartmentDirectory().getDepartmentList()){
//                for(UserAccount account:dep.getUserAccountDirectory().getUserAccountList()){
//                    for(Patient pat:account.getEmployee().getPatientDirectory().getPatientDirectory()){
//                        if(pat.equals(patient)){
//                            if (dep instanceof AnesthesiaDepartment) {
//                                department = dep;
//                                break;
//                            }
//                            else if(dep instanceof EmergencyDepartment){
//                                department = dep;
//                                break;
//                            }
//                            else if(dep instanceof GynecologyDepartment){
//                                department = dep;
//                                break;
//                            }
//                            else if(dep instanceof NeurologyDepartment){
//                                department = dep;
//                                break;
//                            }
//                            else if(dep instanceof PediatricsDepartment){
//                                department = dep;
//                                break;
//                            }
//                            else if(dep instanceof SurgeryDepartment){
//                                department = dep;
//                                break;
//                            }
//                        }
//                    }
//                    if(department!=null){
//                        break;
//                    }
//                }
//                if(department!=null){
//                    break;
//                }
//            }
             for(Department dep : hospital.getDepartmentDirectory().getDepartmentList()){
                 if(dep instanceof SecurityDepartment){
                     department = dep;
                     break;
                 }
             }
            if(department!=null){
                department.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
            }
            
            //txtRequestMessage.setText("");
            clearAllFieldsAndErrLabels();
            populateRequestTable();
            JOptionPane.showMessageDialog(null, "Data Addition request raised!", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnRaiseRequestActionPerformed

    private void btnViewRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewRequestActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblRequestList.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a patient", "WARNING", JOptionPane.WARNING_MESSAGE);
        }
        else{
            WorkRequest request = (WorkRequest) tblRequestList.getValueAt(selectedRow, 0);
            ViewSpecialRequestJPanel viewSpecialRequestJPanel = new ViewSpecialRequestJPanel(cardContainer, account, request, "DataAddition");
            cardContainer.add("viewSpecialRequestJPanel", viewSpecialRequestJPanel);
            CardLayout layout = (CardLayout) cardContainer.getLayout();
            layout.next(cardContainer);
        }
    }//GEN-LAST:event_btnViewRequestActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        goBack();
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtPrescribedOnFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrescribedOnFocusGained
        // TODO add your handling code here:
        if(txtPrescribedOn.getText().equals("MM/dd/yyyy")){
            txtPrescribedOn.setText(Util.BLANK_QUOTES);
        }
        txtPrescribedOn.setForeground(Color.BLACK);
    }//GEN-LAST:event_txtPrescribedOnFocusGained

    private void txtPrescribedOnFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrescribedOnFocusLost
        // TODO add your handling code here:
        if(txtPrescribedOn.getText().isEmpty()||txtPrescribedOn.getText().equals(Util.BLANK_QUOTES)||txtPrescribedOn.getText().equalsIgnoreCase("MM/dd/yyyy")){
            txtPrescribedOn.setText("MM/dd/yyyy");
            txtPrescribedOn.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_txtPrescribedOnFocusLost

    private void txtPrescribedTillFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrescribedTillFocusGained
        // TODO add your handling code here:
        if(txtPrescribedTill.getText().equals("MM/dd/yyyy")){
            txtPrescribedTill.setText(Util.BLANK_QUOTES);
        }
        txtPrescribedTill.setForeground(Color.BLACK.BLACK);
    }//GEN-LAST:event_txtPrescribedTillFocusGained

    private void txtPrescribedTillFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrescribedTillFocusLost
        // TODO add your handling code here:
        if(txtPrescribedTill.getText().isEmpty()||txtPrescribedTill.getText().equals(Util.BLANK_QUOTES)||txtPrescribedTill.getText().equalsIgnoreCase("MM/dd/yyyy")){
            txtPrescribedTill.setText("MM/dd/yyyy");
            txtPrescribedTill.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_txtPrescribedTillFocusLost

    private void txtSurgeryDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSurgeryDateFocusGained
        // TODO add your handling code here:
        if(txtSurgeryDate.getText().equals("MM/dd/yyyy")){
            txtSurgeryDate.setText(Util.BLANK_QUOTES);
        }
        txtSurgeryDate.setForeground(Color.BLACK);
    }//GEN-LAST:event_txtSurgeryDateFocusGained

    private void txtSurgeryDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSurgeryDateFocusLost
        // TODO add your handling code here:
        if(txtSurgeryDate.getText().isEmpty()||txtSurgeryDate.getText().equals(Util.BLANK_QUOTES)||txtSurgeryDate.getText().equalsIgnoreCase("MM/dd/yyyy")){
            txtSurgeryDate.setText("MM/dd/yyyy");
            txtSurgeryDate.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_txtSurgeryDateFocusLost

    private void btnAddAssistsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAssistsActionPerformed
        // TODO add your handling code here:
        if(cmbDoctors.getSelectedIndex()!=0){
            assists.add((Employee)cmbDoctors.getSelectedItem());
            populateTableAssists();
        }
    }//GEN-LAST:event_btnAddAssistsActionPerformed

    private void cmbAdditionTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAdditionTypeActionPerformed
        // TODO add your handling code here:
        if(((String)cmbAdditionType.getSelectedItem()).equals("Select Addition Type")){
            hideShowVitalSignEntry(false);
            hideShowPrescriptionEntry(false);
            hideShowSurgeryEntry(false);
            clearAllFieldsAndErrLabels();
        }
        else if(((String)cmbAdditionType.getSelectedItem()).equals("Add Vital Sign")){
            hideShowVitalSignEntry(true);
            hideShowPrescriptionEntry(false);
            hideShowSurgeryEntry(false);
            clearAllFieldsAndErrLabels();
        }
        else if(((String)cmbAdditionType.getSelectedItem()).equals("Add Prescription")){
            hideShowVitalSignEntry(false);
            hideShowPrescriptionEntry(true);
            hideShowSurgeryEntry(false);
            clearAllFieldsAndErrLabels();
            txtPrescribedOn.setText("MM/dd/yyyy");
            txtPrescribedOn.setForeground(new Color(153,153,153));
            txtPrescribedTill.setText("MM/dd/yyyy");
            txtPrescribedTill.setForeground(new Color(153,153,153));
        }
        else if(((String)cmbAdditionType.getSelectedItem()).equals("Add Surgery")){
            hideShowVitalSignEntry(false);
            hideShowPrescriptionEntry(false);
            hideShowSurgeryEntry(true);
            populateDoctorsCombo();
            populateTableAssists();
            clearAllFieldsAndErrLabels();
            txtSurgeryDate.setText("MM/dd/yyyy");
            txtSurgeryDate.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_cmbAdditionTypeActionPerformed

    private void populateDoctorsCombo(){
        cmbDoctors.removeAllItems();
        cmbDoctors.addItem("Select a Doctor or Nurse");
        for (Department department : hospital.getDepartmentDirectory().getDepartmentList()) {
            for (UserAccount userAccount : department.getUserAccountDirectory().getUserAccountList()) {
                if (userAccount.getRole() instanceof DoctorRole || userAccount.getRole() instanceof NurseRole) {
                    if (!userAccount.equals(account)) {
                        cmbDoctors.addItem(userAccount.getEmployee());
                    }
                }
            }
        }
    }
    
    private void populateTableAssists(){
        DefaultTableModel dtm = (DefaultTableModel) tblAssistants.getModel();
        dtm.setRowCount(0);
        for(Employee employee: assists){
            Object row[] = new Object[2];
            row[0] = employee;
            for (Department dep : hospital.getDepartmentDirectory().getDepartmentList()) {
                for (UserAccount ua : dep.getUserAccountDirectory().getUserAccountList()) {
                    if (ua.getEmployee().equals(employee)) {
                        row[1] = ua.getRole();
                    }
                }
            }
            
            dtm.addRow(row);
        }
    }
    
    private void hideShowVitalSignEntry(boolean caseToDo){
        //Vital Sign Details
        jLabel4.setVisible(caseToDo);
        txtBloodPressure.setVisible(caseToDo);
        lblErrBloodPressure.setVisible(caseToDo);

        jLabel7.setVisible(caseToDo);
        txtPulseRate.setVisible(caseToDo);
        lblErrPulseRate.setVisible(caseToDo);

        jLabel8.setVisible(caseToDo);
        txtWeight.setVisible(caseToDo);
        lblErrWeight.setVisible(caseToDo);

        jLabel9.setVisible(caseToDo);
        txtRespirationRate.setVisible(caseToDo);
        lblErrRespirationRate.setVisible(caseToDo);

        jLabel10.setVisible(caseToDo);
        txtBloodGlucoseLevel.setVisible(caseToDo);
        lblErrBloodGlucoseLevel.setVisible(caseToDo);

        jLabel13.setVisible(caseToDo);
        txtHeight.setVisible(caseToDo);
        lblErrHeight.setVisible(caseToDo);

        jLabel14.setVisible(caseToDo);
        txtTemperature.setVisible(caseToDo);
        lblErrTemperature.setVisible(caseToDo);
    }
    
    private void hideShowPrescriptionEntry(boolean caseToDo) {
        //Prescription Details
        jLabel15.setVisible(caseToDo);
        txtMedicineName.setVisible(caseToDo);
        lblErrMedicineName.setVisible(caseToDo);

        jLabel16.setVisible(caseToDo);
        txtPrescribedOn.setVisible(caseToDo);
        lblErrPrescribedOn.setVisible(caseToDo);

        jLabel17.setVisible(caseToDo);
        txtPrescribedTill.setVisible(caseToDo);
        lblErrPrescribedTill.setVisible(caseToDo);

        jLabel18.setVisible(caseToDo);
        txtDailyDosages.setVisible(caseToDo);
        lblErrDailyDosages.setVisible(caseToDo);

        jLabel19.setVisible(caseToDo);
        txtPrescriptionDescription.setVisible(caseToDo);
        scrollPrescriptionDescription.setVisible(caseToDo);
        lblErrDescription.setVisible(caseToDo);
    }

    private void hideShowSurgeryEntry(boolean caseToDo) {
        //Surgery Details
        jLabel28.setVisible(caseToDo);
        lblPerformedBy.setVisible(caseToDo);

        jLabel21.setVisible(caseToDo);
        txtSurgeryName.setVisible(caseToDo);
        lblErrSurgeryName.setVisible(caseToDo);

        jLabel22.setVisible(caseToDo);
        txtSurgeryDate.setVisible(caseToDo);
        lblErrSurgeryDate.setVisible(caseToDo);

        jLabel23.setVisible(caseToDo);
        txtSurgeryDescription.setVisible(caseToDo);
        lblErrSurgeryDescription.setVisible(caseToDo);

        jLabel24.setVisible(caseToDo);
        txtComplications.setVisible(caseToDo);
        lblErrSurgeryComplications.setVisible(caseToDo);

        jLabel26.setVisible(caseToDo);
        cmbDoctors.setVisible(caseToDo);
        btnAddAssists.setVisible(caseToDo);
        jScrollTableAssist.setVisible(caseToDo);
    }
    
    private void clearAllFieldsAndErrLabels() {
        lblErrBloodPressure.setVisible(false);
        lblErrPulseRate.setVisible(false);
        lblErrWeight.setVisible(false);
        lblErrRespirationRate.setVisible(false);
        lblErrBloodGlucoseLevel.setVisible(false);
        lblErrTemperature.setVisible(false);
        lblErrHeight.setVisible(false);
        
        lblErrMedicineName.setVisible(false);
        lblErrPrescribedOn.setVisible(false);
        lblErrPrescribedTill.setVisible(false);
        lblErrDailyDosages.setVisible(false);
        lblErrDescription.setVisible(false);
        
        lblErrSurgeryName.setVisible(false);
        lblErrSurgeryDate.setVisible(false);
        lblErrSurgeryDescription.setVisible(false);
        lblErrSurgeryComplications.setVisible(false);
        
        txtBloodPressure.setText("");
        txtPulseRate.setText("");
        txtWeight.setText("");
        txtRespirationRate.setText("");
        txtBloodGlucoseLevel.setText("");
        txtHeight.setText("");
        txtTemperature.setText("");
        
        txtMedicineName.setText("");
        txtPrescribedOn.setText("");
        txtPrescribedTill.setText("");
        txtDailyDosages.setText("");
        txtPrescriptionDescription.setText("");
        
        txtSurgeryName.setText("");
        txtSurgeryDate.setText("");
        txtSurgeryDescription.setText("");
        txtComplications.setText("");
        cmbDoctors.setSelectedIndex(0);
    }
    
    private void goBack(){
        cardContainer.remove(this);
        Component[] componentArray = cardContainer.getComponents();
        Component component= componentArray[componentArray.length - 1];
        PatientDetailsJPanel patientDetailsJPanel = (PatientDetailsJPanel) component;
        patientDetailsJPanel.populateTable();
        CardLayout layout = (CardLayout) cardContainer.getLayout();
        layout.previous(cardContainer);
    }

    private boolean validateData() {
        int i = 0;

        if (cmbAdditionType.getSelectedItem().equals("Select Addition Type")) {
            JOptionPane.showMessageDialog(null, "Please Select Addition Type");
            i++;
        }
        //Validate Vital Sign Addition
        if (cmbAdditionType.getSelectedItem().equals("Add Vital Sign")) {
            //Validate Blood Pressure
            if (txtBloodPressure.getText().trim().equalsIgnoreCase("") || txtBloodPressure.getText().trim() == null) {
                txtBloodPressure.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrBloodPressure.setVisible(false);
            } else if (!UtilFunctions.validateNumericalsOnly(txtBloodPressure.getText().trim())) {
                txtBloodPressure.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrBloodPressure.setVisible(true);
                lblErrBloodPressure.setText("Please enter only numbers in Blood Pressure");
                i++;
            } else {
                lblErrBloodPressure.setVisible(false);
                txtBloodPressure.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
            }

            //Validate Pulse Rate
            if (txtPulseRate.getText().trim().equalsIgnoreCase("") || txtPulseRate.getText().trim() == null) {
                txtPulseRate.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrPulseRate.setVisible(false);
            } else if (!UtilFunctions.validateNumericalsOnly(txtPulseRate.getText().trim())) {
                txtPulseRate.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrPulseRate.setVisible(true);
                lblErrPulseRate.setText("Please enter only numbers in Pulse Rate");
                i++;
            } else {
                txtPulseRate.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrPulseRate.setVisible(false);
            }

            //Validate Weight
            if (txtWeight.getText().trim().equalsIgnoreCase("") || txtWeight.getText().trim() == null) {
                txtWeight.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrWeight.setVisible(false);
            } else if (!UtilFunctions.validateNumericalsOnly(txtWeight.getText().trim())) {
                txtWeight.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrWeight.setVisible(true);
                lblErrWeight.setText("Please enter only numbers in Weight");
                i++;
            } else {
                txtWeight.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrWeight.setVisible(false);
            }

            //Validate Respiration Rate
            if (txtRespirationRate.getText().trim().equalsIgnoreCase("") || txtRespirationRate.getText().trim() == null) {
                txtRespirationRate.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrRespirationRate.setVisible(false);
            }
            else if (!UtilFunctions.validateNumericalsOnly(txtRespirationRate.getText().trim())) {
                txtRespirationRate.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrRespirationRate.setVisible(true);
                lblErrRespirationRate.setText("Please enter numbers in Respiration Rate");
                i++;
            } else {
                txtRespirationRate.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrRespirationRate.setVisible(false);
            }

            //Validate Glucose Level
            if (txtBloodGlucoseLevel.getText().trim().equalsIgnoreCase("") || txtBloodGlucoseLevel.getText().trim() == null) {
                txtBloodGlucoseLevel.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrBloodGlucoseLevel.setVisible(false);
            } else if (!UtilFunctions.validateNumericalsOnly(txtBloodGlucoseLevel.getText().trim())) {
                txtBloodGlucoseLevel.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrBloodGlucoseLevel.setVisible(true);
                lblErrBloodGlucoseLevel.setText("Please enter numbers in Blood Glucose Level");
                i++;
            } else {
                txtBloodGlucoseLevel.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrBloodGlucoseLevel.setVisible(false);
            }

            //Validate Height
            if (txtHeight.getText().trim().equalsIgnoreCase("") || txtHeight.getText().trim() == null) {
                txtHeight.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrHeight.setVisible(false);
            } else if (!UtilFunctions.validateNumericalsOnly(txtHeight.getText().trim())) {
                txtHeight.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrHeight.setVisible(true);
                lblErrHeight.setText("Please enter numbers in Height");
                i++;
            } else {
                txtHeight.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrHeight.setVisible(false);
            }

            //Validate Temperature
            if (txtTemperature.getText().trim().equalsIgnoreCase("") || txtTemperature.getText().trim() == null) {
                txtTemperature.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrTemperature.setVisible(false);
            } else if (!UtilFunctions.validateNumericalsOnly(txtTemperature.getText().trim())) {
                txtTemperature.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrTemperature.setVisible(true);
                lblErrTemperature.setText("Please enter numbers in temperature");
                i++;
            } else {
                txtTemperature.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrTemperature.setVisible(false);
            }
        } 
        //Validate Prescription Addition
        else if (cmbAdditionType.getSelectedItem().equals("Add Prescription")) {
            //Validate Medicine Name
            if (txtMedicineName.getText().trim().equalsIgnoreCase("") || txtMedicineName.getText().trim() == null) {
                txtMedicineName.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrMedicineName.setVisible(true);
                lblErrMedicineName.setText("Please enter Medicine Name");
                i++;
            } else if (!UtilFunctions.validateNumberAndText(txtMedicineName.getText().trim())) {
                txtMedicineName.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrMedicineName.setVisible(true);
                lblErrMedicineName.setText("Please enter only numbers and text in Medicine Name");
                i++;
            } else {
                lblErrMedicineName.setVisible(false);
                txtMedicineName.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
            }

            //Validate Prescribed On
            if (txtPrescribedOn.getText().trim().equalsIgnoreCase("") || txtPrescribedOn.getText().trim() == null || txtPrescribedOn.getText().equalsIgnoreCase("MM/dd/yyyy")) {
                txtPrescribedOn.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrPrescribedOn.setVisible(true);
                lblErrPrescribedOn.setText("Please enter Prescribed On date");
                i++;
            } else if (!UtilFunctions.validateDateFormat(txtPrescribedOn.getText().trim())) {
                txtPrescribedOn.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrPrescribedOn.setVisible(true);
                lblErrPrescribedOn.setText("Please enter date in mm/dd/yyyy format");
                i++;
            } else if (!UtilFunctions.validatePastDate(txtPrescribedOn.getText().trim())) {
                txtPrescribedOn.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrPrescribedOn.setVisible(true);
                lblErrPrescribedOn.setText("Past dates not allowed!");
                i++;
            } else {
                txtPrescribedOn.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrPrescribedOn.setVisible(false);
            }

            //Validate Prescribed Till
            if (txtPrescribedTill.getText().trim().equalsIgnoreCase("") || txtPrescribedTill.getText().trim() == null || txtPrescribedTill.getText().equalsIgnoreCase("MM/dd/yyyy")) {
                txtPrescribedTill.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrPrescribedTill.setVisible(true);
                lblErrPrescribedTill.setText("Please enter Prescribed Till date");
                i++;
            } else if (!UtilFunctions.validateDateFormat(txtPrescribedTill.getText().trim())) {
                txtPrescribedTill.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrPrescribedTill.setVisible(true);
                lblErrPrescribedTill.setText("Please enter date in mm/dd/yyyy format");
                i++;
            } else if (!UtilFunctions.validateDateSequence(txtPrescribedTill.getText().trim(), txtPrescribedOn.getText().trim())) {
                txtPrescribedTill.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrPrescribedTill.setVisible(true);
                lblErrPrescribedTill.setText("Please enter Precribed Till date after Prescribed On date");
                i++;
            } else {
                txtPrescribedTill.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrPrescribedTill.setVisible(false);
            }

            //Validate Daily Doses
            if (txtDailyDosages.getText().trim().equalsIgnoreCase("") || txtDailyDosages.getText().trim() == null) {
                txtDailyDosages.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrDailyDosages.setVisible(true);
                lblErrDailyDosages.setText("Please enter Daily Dose");
                i++;
            }
            else if (!UtilFunctions.validateNumericalsOnly(txtDailyDosages.getText().trim())) {
                txtDailyDosages.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrDailyDosages.setVisible(true);
                lblErrDailyDosages.setText("Please enter numbers in Daily Dose");
                i++;
            } else {
                txtDailyDosages.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrDailyDosages.setVisible(false);
            }

            //Validate Dosage Description
            if (txtPrescriptionDescription.getText().trim().equalsIgnoreCase("") || txtPrescriptionDescription.getText().trim() == null) {
                txtPrescriptionDescription.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrDescription.setVisible(false);
            } else if (!UtilFunctions.validateNumberAndText(txtPrescriptionDescription.getText().trim())) {
                txtPrescriptionDescription.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrDescription.setVisible(true);
                lblErrDescription.setText("Please enter numbers in Blood Glucose Level");
                i++;
            } else {
                txtPrescriptionDescription.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrDescription.setVisible(false);
            }
        } 
        //Validate Surgery Addition
        else if (cmbAdditionType.getSelectedItem().equals("Add Surgery")) {
            if (txtSurgeryName.getText().trim().equalsIgnoreCase("") || txtSurgeryName.getText().trim() == null) {
                txtSurgeryName.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrSurgeryName.setVisible(true);
                lblErrSurgeryName.setText("Please enter Surgery Name");
                i++;
            } else if (!UtilFunctions.validateTextOnly(txtSurgeryName.getText().trim())) {
                txtSurgeryName.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrSurgeryName.setVisible(true);
                lblErrSurgeryName.setText("Please enter only text in Surgery Name");
                i++;
            } else {
                lblErrSurgeryName.setVisible(false);
                txtSurgeryName.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
            }

            //Validate Surgery Date
            if (txtSurgeryDate.getText().trim().equalsIgnoreCase("") || txtSurgeryDate.getText().trim() == null || txtSurgeryDate.getText().equalsIgnoreCase("MM/dd/yyyy")) {
                txtSurgeryDate.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrSurgeryDate.setVisible(true);
                lblErrSurgeryDate.setText("Please enter Surgery Date");
                i++;
            } else if (!UtilFunctions.validateDateFormat(txtSurgeryDate.getText().trim())) {
                txtSurgeryDate.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrSurgeryDate.setVisible(true);
                lblErrSurgeryDate.setText("Please enter date in mm/dd/yyyy format");
                i++;
            } else if (!UtilFunctions.validatePastDate(txtSurgeryDate.getText().trim())) {
                txtSurgeryDate.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrSurgeryDate.setVisible(true);
                lblErrSurgeryDate.setText("Can't accept past dates");
                i++;
            } else {
                txtSurgeryDate.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrSurgeryDate.setVisible(false);
            }

            //Validate Surgery Description
            if (txtSurgeryDescription.getText().trim().equalsIgnoreCase("") || txtSurgeryDescription.getText().trim() == null) {
                txtSurgeryDescription.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrSurgeryDescription.setVisible(true);
                lblErrSurgeryDescription.setText("Please enter Surgery Details");
                i++;
            } else if (!UtilFunctions.validateTextOnly(txtSurgeryDescription.getText().trim())) {
                txtSurgeryDescription.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrSurgeryDescription.setVisible(true);
                lblErrSurgeryDescription.setText("Please enter only text");
                i++;
            } else {
                txtSurgeryDescription.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrSurgeryDescription.setVisible(false);
            }

            //Validate Surgery Complications
            if (txtComplications.getText().trim().equalsIgnoreCase("") || txtComplications.getText().trim() == null) {
                txtComplications.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrSurgeryComplications.setVisible(true);
                lblErrSurgeryComplications.setText("Please enter Surgery Complications");
                i++;
            }
            else if (!UtilFunctions.validateTextOnly(txtComplications.getText().trim())) {
                txtComplications.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
                lblErrSurgeryComplications.setVisible(true);
                lblErrSurgeryComplications.setText("Please enter only text");
                i++;
            } else {
                txtComplications.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
                lblErrSurgeryComplications.setVisible(false);
            }
        }

        if (txtVisitReason.getText().trim().equalsIgnoreCase("") || txtVisitReason.getText().trim() == null) {
            txtVisitReason.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
            lblErrVisitReason.setVisible(true);
            lblErrVisitReason.setText("Please enter visit reason");
            i++;
        } else if (!UtilFunctions.validateNumberAndText(txtVisitReason.getText().trim())) {
            txtVisitReason.setBorder(javax.swing.BorderFactory.createLineBorder(Color.RED));
            lblErrVisitReason.setVisible(true);
            lblErrVisitReason.setText("Please enter only text and numbers");
            i++;
        } else {
            txtVisitReason.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
            lblErrVisitReason.setVisible(false);
        }

        if (i == 0) {
            return true;
        } else {
            return false;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAssists;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRaiseRequest;
    private javax.swing.JButton btnViewRequest;
    private javax.swing.JComboBox cmbAdditionType;
    private javax.swing.JComboBox cmbDoctors;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollTableAssist;
    private javax.swing.JLabel lblErrBloodGlucoseLevel;
    private javax.swing.JLabel lblErrBloodPressure;
    private javax.swing.JLabel lblErrDailyDosages;
    private javax.swing.JLabel lblErrDescription;
    private javax.swing.JLabel lblErrHeight;
    private javax.swing.JLabel lblErrMedicineName;
    private javax.swing.JLabel lblErrPrescribedOn;
    private javax.swing.JLabel lblErrPrescribedTill;
    private javax.swing.JLabel lblErrPulseRate;
    private javax.swing.JLabel lblErrRespirationRate;
    private javax.swing.JLabel lblErrSurgeryComplications;
    private javax.swing.JLabel lblErrSurgeryDate;
    private javax.swing.JLabel lblErrSurgeryDescription;
    private javax.swing.JLabel lblErrSurgeryName;
    private javax.swing.JLabel lblErrTemperature;
    private javax.swing.JLabel lblErrVisitReason;
    private javax.swing.JLabel lblErrWeight;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblLoggedInUser;
    private javax.swing.JLabel lblPatientID;
    private javax.swing.JLabel lblPatientName;
    private javax.swing.JLabel lblPerformedBy;
    private javax.swing.JLabel lblVisitDate;
    private javax.swing.JScrollPane scrollPrescriptionDescription;
    private javax.swing.JTable tblAssistants;
    private javax.swing.JTable tblRequestList;
    private javax.swing.JTextField txtBloodGlucoseLevel;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtComplications;
    private javax.swing.JTextField txtDailyDosages;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtMedicineName;
    private javax.swing.JTextField txtPrescribedOn;
    private javax.swing.JTextField txtPrescribedTill;
    private javax.swing.JTextArea txtPrescriptionDescription;
    private javax.swing.JTextField txtPulseRate;
    private javax.swing.JTextField txtRespirationRate;
    private javax.swing.JTextField txtSurgeryDate;
    private javax.swing.JTextField txtSurgeryDescription;
    private javax.swing.JTextField txtSurgeryName;
    private javax.swing.JTextField txtTemperature;
    private javax.swing.JTextArea txtVisitReason;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables
}
