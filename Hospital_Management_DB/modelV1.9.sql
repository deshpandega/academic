-- MySQL Script generated by MySQL Workbench
-- 12/11/16 01:42:23
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema project
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema project
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `project` ;
USE `project` ;

-- -----------------------------------------------------
-- Table `project`.`Address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Address` ;

CREATE TABLE IF NOT EXISTS `project`.`Address` (
  `address_id` INT NOT NULL,
  `address_line1` VARCHAR(45) NOT NULL,
  `address_line2` VARCHAR(45) NULL,
  `city` VARCHAR(45) NOT NULL,
  `state` VARCHAR(5) NOT NULL,
  `zip` VARCHAR(5) NOT NULL,
  `country` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`address_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Hospital`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Hospital` ;

CREATE TABLE IF NOT EXISTS `project`.`Hospital` (
  `hospital_id` INT NOT NULL AUTO_INCREMENT,
  `hospital_name` VARCHAR(45) NOT NULL,
  `contact_number` VARCHAR(45) NOT NULL,
  `address_id` INT NOT NULL,
  PRIMARY KEY (`hospital_id`),
  INDEX `fk_Hospital_Address1_idx` (`address_id` ASC),
  CONSTRAINT `fk_hosp_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `project`.`Address` (`address_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Department`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Department` ;

CREATE TABLE IF NOT EXISTS `project`.`Department` (
  `department_id` INT NOT NULL AUTO_INCREMENT,
  `department_name` VARCHAR(45) NOT NULL,
  `hospital_id` INT NOT NULL,
  PRIMARY KEY (`department_id`),
  INDEX `hospital_id_idx` (`hospital_id` ASC),
  CONSTRAINT `fk_dep_hospital_id`
    FOREIGN KEY (`hospital_id`)
    REFERENCES `project`.`Hospital` (`hospital_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Insurance_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Insurance_type` ;

CREATE TABLE IF NOT EXISTS `project`.`Insurance_type` (
  `insurance_type_id` INT NOT NULL,
  `insurance_name` VARCHAR(45) NOT NULL,
  `max_insurance_amount` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`insurance_type_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Insurance`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Insurance` ;

CREATE TABLE IF NOT EXISTS `project`.`Insurance` (
  `insurance_number` INT NOT NULL,
  `insurance_type_id` INT NOT NULL,
  `insurance_date` DATETIME NOT NULL,
  `expire_date` DATETIME NOT NULL,
  PRIMARY KEY (`insurance_number`),
  INDEX `insurance_type_id_idx` (`insurance_type_id` ASC),
  CONSTRAINT `fk_ins_insurance_type_id`
    FOREIGN KEY (`insurance_type_id`)
    REFERENCES `project`.`Insurance_type` (`insurance_type_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Person`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Person` ;

CREATE TABLE IF NOT EXISTS `project`.`Person` (
  `person_id` INT NOT NULL,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `address_id` INT NULL,
  `email_id` VARCHAR(70) NULL,
  `contact_numnber` VARCHAR(45) NULL,
  `insurance_number` INT NULL,
  INDEX `address_id_idx` (`address_id` ASC),
  INDEX `insurance_number_idx` (`insurance_number` ASC),
  PRIMARY KEY (`person_id`),
  CONSTRAINT `fk_per_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `project`.`Address` (`address_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_per_insurance_number`
    FOREIGN KEY (`insurance_number`)
    REFERENCES `project`.`Insurance` (`insurance_number`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Role` ;

CREATE TABLE IF NOT EXISTS `project`.`Role` (
  `role_id` INT NOT NULL,
  `role_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`role_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Staff`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Staff` ;

CREATE TABLE IF NOT EXISTS `project`.`Staff` (
  `staff_id` INT NOT NULL AUTO_INCREMENT,
  `department_id` INT NOT NULL,
  `designation` VARCHAR(45) NULL,
  `role_id` INT NOT NULL,
  `person_id` INT NOT NULL,
  PRIMARY KEY (`staff_id`),
  INDEX `department_id_idx` (`department_id` ASC),
  INDEX `person_id_idx` (`person_id` ASC),
  INDEX `role_id_idx` (`role_id` ASC),
  CONSTRAINT `fk_st_department_id`
    FOREIGN KEY (`department_id`)
    REFERENCES `project`.`Department` (`department_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_st_person_id`
    FOREIGN KEY (`person_id`)
    REFERENCES `project`.`Person` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_st_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `project`.`Role` (`role_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Patient`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Patient` ;

CREATE TABLE IF NOT EXISTS `project`.`Patient` (
  `patient_id` INT NOT NULL,
  `role_id` INT NOT NULL,
  `person_id` INT NOT NULL,
  `admission_date` DATETIME NULL,
  `previous_stay_flag` CHAR(1) NOT NULL,
  `reason` VARCHAR(100) NULL,
  `patient_type` INT NOT NULL,
  PRIMARY KEY (`patient_id`),
  INDEX `person_id_idx` (`person_id` ASC),
  INDEX `role_id_idx` (`role_id` ASC),
  CONSTRAINT `fk_pat_person_id`
    FOREIGN KEY (`person_id`)
    REFERENCES `project`.`Person` (`person_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_pat_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `project`.`Role` (`role_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Department_Patient_Past`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Department_Patient_Past` ;

CREATE TABLE IF NOT EXISTS `project`.`Department_Patient_Past` (
  `department_id` INT NOT NULL,
  `patient_id` INT NOT NULL,
  `current_department_flag` CHAR(5) NOT NULL,
  INDEX `department_id_idx` (`department_id` ASC),
  INDEX `patient_id_idx` (`patient_id` ASC),
  CONSTRAINT `fk_deppat_department_id`
    FOREIGN KEY (`department_id`)
    REFERENCES `project`.`Department` (`department_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_deppat_patient_id`
    FOREIGN KEY (`patient_id`)
    REFERENCES `project`.`Patient` (`patient_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`In_House_Patient`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`In_House_Patient` ;

CREATE TABLE IF NOT EXISTS `project`.`In_House_Patient` (
  `patient_id` INT NOT NULL,
  `bed_number` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`patient_id`),
  CONSTRAINT `fk_inpat_patient_id`
    FOREIGN KEY (`patient_id`)
    REFERENCES `project`.`Patient` (`patient_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Out_House_Patient`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Out_House_Patient` ;

CREATE TABLE IF NOT EXISTS `project`.`Out_House_Patient` (
  `patient_id` INT NOT NULL,
  `next_checkin_date` DATETIME NULL,
  PRIMARY KEY (`patient_id`),
  CONSTRAINT `fk_outpat_patient_id`
    FOREIGN KEY (`patient_id`)
    REFERENCES `project`.`Patient` (`patient_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Previous_Checkin_Dates`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Previous_Checkin_Dates` ;

CREATE TABLE IF NOT EXISTS `project`.`Previous_Checkin_Dates` (
  `id` INT NOT NULL,
  `patient_id` INT NOT NULL,
  `previous_checkin_dates` DATETIME NULL,
  PRIMARY KEY (`id`),
  INDEX `patient_id_idx` (`patient_id` ASC),
  CONSTRAINT `fk_prevch_patient_id`
    FOREIGN KEY (`patient_id`)
    REFERENCES `project`.`Out_House_Patient` (`patient_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Appointment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Appointment` ;

CREATE TABLE IF NOT EXISTS `project`.`Appointment` (
  `appointment_id` INT NOT NULL,
  `appointment_start_date_time` DATETIME NOT NULL,
  `booked_by` INT NOT NULL,
  `booked_for` INT NOT NULL,
  `reason` VARCHAR(100) NULL,
  `appointment_bill` INT NOT NULL,
  `appointment_end_date_time` DATETIME NOT NULL,
  PRIMARY KEY (`appointment_id`),
  INDEX `booked_by_idx` (`booked_by` ASC),
  INDEX `booked_for_idx` (`booked_for` ASC),
  CONSTRAINT `fk_app_booked_by`
    FOREIGN KEY (`booked_by`)
    REFERENCES `project`.`Patient` (`patient_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_app_booked_for`
    FOREIGN KEY (`booked_for`)
    REFERENCES `project`.`Staff` (`staff_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Prescription`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Prescription` ;

CREATE TABLE IF NOT EXISTS `project`.`Prescription` (
  `prescription_id` INT NOT NULL,
  `prescription_date` DATETIME NOT NULL,
  `prescription_till` DATETIME NOT NULL,
  `dose_per_day` INT NOT NULL,
  `prescribed_by` INT NOT NULL,
  `prescribed_to` INT NOT NULL,
  PRIMARY KEY (`prescription_id`),
  INDEX `prescribed_by_idx` (`prescribed_by` ASC),
  INDEX `prescribed_to_idx` (`prescribed_to` ASC),
  CONSTRAINT `fk_pre_prescribed_by`
    FOREIGN KEY (`prescribed_by`)
    REFERENCES `project`.`Staff` (`staff_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_pre_prescribed_to`
    FOREIGN KEY (`prescribed_to`)
    REFERENCES `project`.`Patient` (`patient_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Medicines`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Medicines` ;

CREATE TABLE IF NOT EXISTS `project`.`Medicines` (
  `medicine_id` INT NOT NULL,
  `medicine_name` VARCHAR(45) NOT NULL,
  `price` INT NOT NULL,
  PRIMARY KEY (`medicine_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Procedures`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Procedures` ;

CREATE TABLE IF NOT EXISTS `project`.`Procedures` (
  `procedure_id` INT NOT NULL,
  `procedure_date` DATETIME NOT NULL,
  `description` VARCHAR(100) NULL,
  `performed_by` INT NOT NULL,
  `performed_on` INT NOT NULL,
  `procedure_bill` INT NOT NULL,
  PRIMARY KEY (`procedure_id`),
  INDEX `performed_by_idx` (`performed_by` ASC),
  INDEX `performed_on_idx` (`performed_on` ASC),
  CONSTRAINT `fk_pro_performed_by`
    FOREIGN KEY (`performed_by`)
    REFERENCES `project`.`Staff` (`staff_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_pro_performed_on`
    FOREIGN KEY (`performed_on`)
    REFERENCES `project`.`Patient` (`patient_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Surgery`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Surgery` ;

CREATE TABLE IF NOT EXISTS `project`.`Surgery` (
  `surgery_id` INT NOT NULL,
  `surgery_date` DATETIME NOT NULL,
  `description` VARCHAR(100) NULL,
  `performed_on` INT NOT NULL,
  `surgery_bill` INT NOT NULL,
  PRIMARY KEY (`surgery_id`),
  INDEX `performed_on_idx` (`performed_on` ASC),
  CONSTRAINT `fk_sur_performed_on`
    FOREIGN KEY (`performed_on`)
    REFERENCES `project`.`Patient` (`patient_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Surgery_Assistance`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Surgery_Assistance` ;

CREATE TABLE IF NOT EXISTS `project`.`Surgery_Assistance` (
  `surgery_id` INT NOT NULL,
  `staff_id` INT NOT NULL,
  INDEX `surgery_id_idx` (`surgery_id` ASC),
  INDEX `staff_id_idx` (`staff_id` ASC),
  CONSTRAINT `fk_suas_surgery_id`
    FOREIGN KEY (`surgery_id`)
    REFERENCES `project`.`Surgery` (`surgery_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_sras_staff_id`
    FOREIGN KEY (`staff_id`)
    REFERENCES `project`.`Staff` (`staff_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Medicine_Prescription`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Medicine_Prescription` ;

CREATE TABLE IF NOT EXISTS `project`.`Medicine_Prescription` (
  `medicine_id` INT NOT NULL,
  `prescription_id` INT NOT NULL,
  `quantity` INT NOT NULL DEFAULT 0,
  INDEX `medicine_id_idx` (`medicine_id` ASC),
  INDEX `prescription_id_idx` (`prescription_id` ASC),
  CONSTRAINT `fk_medPr_medicine_id`
    FOREIGN KEY (`medicine_id`)
    REFERENCES `project`.`Medicines` (`medicine_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_medPr_prescription_id`
    FOREIGN KEY (`prescription_id`)
    REFERENCES `project`.`Prescription` (`prescription_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project`.`Billing`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `project`.`Billing` ;

CREATE TABLE IF NOT EXISTS `project`.`Billing` (
  `bill_id` INT NOT NULL,
  `bill_date` DATETIME NOT NULL,
  `patient_id` INT NOT NULL,
  `bill_amount` INT NULL,
  `insurance_amount` INT NULL,
  `final_bill_amount` INT NULL,
  `bill_start_date` DATETIME NULL,
  PRIMARY KEY (`bill_id`),
  INDEX `fk_bill_patient_id_idx` (`patient_id` ASC),
  CONSTRAINT `fk_bill_patient_id`
    FOREIGN KEY (`patient_id`)
    REFERENCES `project`.`Patient` (`patient_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `project` ;

-- -----------------------------------------------------
-- Placeholder table for view `project`.`Billing_View`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `project`.`Billing_View` (`patient_id` INT, `Procedure_Expense` INT, `Surgery_Expense` INT, `Appointment_Expense` INT, `Prescription_Expense` INT);

-- -----------------------------------------------------
-- Placeholder table for view `project`.`Prescription_Bill_View`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `project`.`Prescription_Bill_View` (`prescribed_to` INT, `prescription_id` INT, `prescription_bill` INT);

-- -----------------------------------------------------
-- View `project`.`Billing_View`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `project`.`Billing_View` ;
DROP TABLE IF EXISTS `project`.`Billing_View`;
USE `project`;
CREATE  OR REPLACE VIEW `Billing_View` AS
SELECT p.patient_id, 
	CASE 
		WHEN (SELECT SUM(Procedures.procedure_bill) FROM Procedures WHERE Procedures.performed_on = p.patient_id AND Procedures.procedure_date > p.admission_date) IS NULL THEN 0
        ELSE (SELECT SUM(Procedures.procedure_bill) FROM Procedures WHERE Procedures.performed_on = p.patient_id AND Procedures.procedure_date > p.admission_date)
	END AS Procedure_Expense,
    CASE 
		WHEN (SELECT SUM(Surgery.surgery_bill) FROM Surgery WHERE Surgery.performed_on = p.patient_id AND Surgery.surgery_date > p.admission_date) IS NULL THEN 0
        ELSE (SELECT SUM(Surgery.surgery_bill) FROM Surgery WHERE Surgery.performed_on = p.patient_id AND Surgery.surgery_date > p.admission_date)
	END AS Surgery_Expense,
    CASE
		WHEN (SELECT SUM(Appointment.appointment_bill) FROM Appointment WHERE Appointment.booked_by = p.patient_id AND Appointment.appointment_end_date_time > p.admission_date) IS NULL THEN 0
        ELSE (SELECT SUM(Appointment.appointment_bill) FROM Appointment WHERE Appointment.booked_by = p.patient_id AND Appointment.appointment_end_date_time > p.admission_date) 
	END AS Appointment_Expense,
    CASE
		WHEN (SELECT SUM(Prescription_Bill_View.prescription_bill) FROM Prescription_Bill_View,Prescription WHERE Prescription_Bill_View.prescription_id = Prescription.prescription_id
			AND Prescription.prescribed_to = p.patient_id AND Prescription.prescription_date > p.admission_date) IS NULL THEN 0
        ELSE (SELECT SUM(Prescription_Bill_View.prescription_bill) FROM Prescription_Bill_View,Prescription WHERE Prescription_Bill_View.prescription_id = Prescription.prescription_id
			AND Prescription.prescribed_to = p.patient_id AND Prescription.prescription_date > p.admission_date) 
	END AS Prescription_Expense
	FROM Patient p
    GROUP BY p.patient_id;

-- -----------------------------------------------------
-- View `project`.`Prescription_Bill_View`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `project`.`Prescription_Bill_View` ;
DROP TABLE IF EXISTS `project`.`Prescription_Bill_View`;
USE `project`;
CREATE  OR REPLACE VIEW `Prescription_Bill_View` AS
SELECT p.prescribed_to, p.prescription_id, SUM(mp.quantity*m.price) AS prescription_bill
	FROM Prescription p
    JOIN Medicine_Prescription mp
    ON (p.prescription_id = mp.prescription_id) 
	JOIN Medicines m
    ON(m.medicine_id = mp.medicine_id)
    GROUP BY p.prescribed_to;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
